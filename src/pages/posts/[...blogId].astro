---
import { getCollection, getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((post) => ({
    params: {
      blogId: post.slug,
    },
  }));
}
const { blogId } = Astro.params;
if (!blogId) {
  throw new Error("Slug is required");
}
const curr = await getEntry("posts", blogId);
if (!curr) {
  throw new Error("Post not found");
}
const Content = (await curr?.render()).Content;
---

<Layout title={`Essential Randomness â€” ${curr.data.title}`}>
  <Fragment slot="head">
    {
      curr.data.og_image && (
        <Fragment>
          <meta property="og:image" content={curr.data.og_image.src} />
          <meta name="twitter:image" content={curr.data.og_image.src} />
        </Fragment>
      )
    }
    {
      curr.data.og_description && (
        <Fragment>
          <meta name="description" content={curr.data.og_description} />
          <meta property="og:description" content={curr.data.og_description} />
        </Fragment>
      )
    }
  </Fragment>
  <main class="post">
    <h1>
      {curr.data.title}
    </h1>
    {curr.data.tagline && <h2 class="tagline">{curr.data.tagline}</h2>}
    <div>
      Published on <date
        >{
          curr.data.created_at.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
          })
        }</date
      >
    </div>
    {
      curr.data.status == "rough-draft" && (
        <div class="rough-draft">
          <h3>Warning: Roughness Ahead~</h3>
          <p>
            <span>
              The post you're about to read is marked as a rough draft!
            </span>
            Rough drafts might provide unclear (or wrong) information, be hard
            to read, or otherwise all over the place.{" "}
            <em>Read at your own risk!</em>
          </p>
          <p>
            Want to learn more or help correct something? Hit me up on socials!
          </p>
        </div>
      )
    }
    <h2 id="table-of-contents">Table of Contents</h2>
    <Content />
  </main>

  <style is:global>
    figure {
      max-width: 100%;
      max-height: 900px;
      height: auto;
      width: auto;
      margin: 0 auto;
      display: block;

      :not(&) > img {
        padding-block: 1.5rem;
      }

      p {
        margin: 0;
        font-size: smaller;
      }
      figcaption p {
        padding-inline: min(3rem, 5%);
        text-align: center;
      }
    }

    #table-of-contents + nav > ol {
      border: 2px solid black;
      border-radius: 16px;
      padding: 30px 50px;
      display: flex;
      flex-direction: column;
      gap: 5px;
      height: 100%;
      box-shadow: var(--box-shadow-deep);
      margin-bottom: 50px;

      li {
        margin-bottom: 0;
        display: flex;
        flex-direction: column;
        gap: 5px;

        ol {
          padding-inline-start: 20px;
        }
      }
    }

    img {
      max-width: 100%;
      max-height: 900px;
      height: auto;
      width: auto;
      margin: 0 auto;
      display: block;
    }

    .custom-emoji {
      display: inline-block;
      padding: 0 5px;
      height: 30px;
      vertical-align: middle;

      & + .custom-emoji {
        padding-inline-start: 0;
      }
    }

    h1:has(~ .tagline) {
      margin-bottom: 0;
    }

    .tagline {
      color: gray;
      margin-top: 0;
    }

    .rough-draft {
      padding: 20px 40px;
      box-shadow: 7px 10px 0 0px black;
      border-radius: 3px;
      width: 80%;
      margin: 35px auto;
      /* background-color: papayawhip; */
      span {
        font-weight: bold;
        margin-right: 4px;
      }
      p:last-child {
        font-size: small;
      }
    }
  </style>

  <script>
    import { annotate } from "rough-notation";

    const container = document.querySelector<HTMLDivElement>(".rough-draft");
    const title = container?.querySelector<HTMLDivElement>("span");
    if (container) {
      const annotation = annotate(container, {
        type: "box",
        animate: false,
        padding: -4,
      });
      annotation.show();
    }
    if (title) {
      const annotation = annotate(title, {
        type: "highlight",
        animate: false,
        color: "lightgray",
        padding: -4,
        multiline: true,
      });
      annotation.show();
    }
  </script>
</Layout>
